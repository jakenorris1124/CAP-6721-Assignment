#version 430 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in; // You may use x and y size to be different from 1. In such a case adjust the workgroup numbers during shader dispatch time

// Declare an image2D variable to represent a viewport raster image
layout (rgba32f, binding = 0) uniform image2D outputImage;

// Define a Ray structure
struct Ray {
    vec3 origin;
    vec3 direction;
    float tmin, tmax;
};

struct Sphere {
    vec4 color;
    vec3 center;
    float radius;
};

struct Box {
    vec4 minimum;
    vec4 maximum;
};


layout (std430, binding = 10) readonly buffer boundsBuffer
{
    Box bounds;
};

layout (std430, binding = 11) readonly buffer sphereBuffer
{
    Sphere spheres[];
};

/*
* Index 0 -> Left wall
* Index 1 -> Right wall
* Index 2 -> Top wall
* Index 3 -> Bottom wall
* Index 4 -> Back wall
*/
layout (std430, binding = 20) readonly buffer wallBuffer
{
    mat4 wallMatrices[];
};

// Inside the compute shader kernel:
uniform vec3 eye, at, up;
uniform float fov;
uniform vec2 resolution;

vec4 missShader(Ray ray) 
{
    vec3 unit_direction = normalize(ray.direction);
    float a = 0.5*(unit_direction.y + 1.0);
    vec3 color = (1.0-a)*vec3(1.0, 1.0, 1.0) + a*vec3(0.5, 0.7, 1.0);

    return vec4(color.xyz, 1.0);
}

vec4 hitShader(Ray ray, float t, Sphere sphere)
{
    vec3 intersectionPoint = ray.origin + (t * ray.direction);
    vec3 sphereNormal = normalize(intersectionPoint - sphere.center);

    float angle = dot(normalize(eye), sphereNormal);

    return vec4(sphere.color.xyz, 1.0) * angle;
}

vec4 boxHitShader(vec3 color, vec3 normal)
{
    float angle = dot(normalize(eye), normal);

    if (angle > 0.2)
        return vec4(color, 1.0) * angle;

    return vec4(color, 1.0) * 0.4;
}

float sphereHit(Sphere sphere, Ray ray)
{
    vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, oc);
    float c = dot(oc, oc) - (sphere.radius * sphere.radius);
    float discriminant = (b * b) - (4.0 * a * c);

    if (discriminant < 0.0)
        return -1.0;

    discriminant = sqrt(discriminant);
    float t = (-b - discriminant)  / (2.0 * a);

    if (t <= ray.tmin)
        t = (-b + discriminant)  / (2.0 * a);

    if (t > ray.tmin && t < ray.tmax)
        return t;
        
    return -1.0;
}

float optimizedSphereHit(Sphere sphere, Ray ray)
{
    vec3 co = sphere.center - ray.origin;
    float l2 = dot(co, co);
    float r2 = sphere.radius * sphere.radius;

    float s  = dot(co, ray.direction);
    float m2 = l2 - (s * s);
    
    if (m2 <= r2)
    {
        float q = sqrt(r2 - m2);
        return s - q;
    }

    return -1.0;
}

bool aabbHit(Ray ray, Box aabb)
{
    vec3 tMin = (aabb.minimum.xyz - ray.origin) / ray.direction;
    vec3 tMax = (aabb.maximum.xyz - ray.origin) / ray.direction;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(max(t1.x, t1.y), t1.z), ray.tmin);
    float tFar = min(min(min(t2.x, t2.y), t2.z), ray.tmax);

    return tNear <= tFar;
}

vec3 aabbHitPoint(Ray ray, Box aabb)
{
    vec3 tMin = (aabb.minimum.xyz - ray.origin) / ray.direction;
    vec3 tMax = (aabb.maximum.xyz - ray.origin) / ray.direction;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(max(t1.x, t1.y), t1.z), ray.tmin);
    float tFar = min(min(min(t2.x, t2.y), t2.z), ray.tmax);

    if (tNear <= tFar)
        return ray.origin + (t2 * ray.direction);

    return ray.origin;
}

vec3 aabbHitNormal(Ray ray, Box aabb)
{
    vec3 tMin = (aabb.minimum.xyz - ray.origin) / ray.direction;
    vec3 tMax = (aabb.maximum.xyz - ray.origin) / ray.direction;

    vec3 t1 = min(tMin, tMax);
    int dir = 1;
    if (tMin == t1)
        dir = -1;

    float tNear = max(max(max(t1.x, t1.y), t1.z), ray.tmin);

    if (t1.x == tNear)
        return vec3(0, dir, 0);
    if (t1.y == tNear)
        return vec3(dir, 0, 0);
    return vec3(0, 0, dir);
}

vec4 rayColor(Ray ray) 
{
   if(aabbHit(ray, bounds))
   {
        int numSpheres = spheres.length();
        float closestT = ray.tmax;
        int closestI = -1;
        for (int i  = 0; i < numSpheres; i++)
        {
            float intermediateT = optimizedSphereHit(spheres[i], ray);
            if (intermediateT < closestT && intermediateT > ray.tmin)
            {
                closestT = intermediateT;
                closestI = i;
            }
        }

        if (closestI != -1)
            return hitShader(ray, closestT, spheres[closestI]);
   }

   Box canonical;
   canonical.minimum = vec4(-1, -1, -1, 1);
   canonical.maximum = vec4(1, 1, 1, 1);
   float closestT = ray.tmax;
   float closestI = -1;
   vec3 normal;
   for (int i = 0; i < 5; i++)
   {
        Ray wallRay = ray;
        wallRay.origin = (inverse(wallMatrices[i]) * vec4(ray.origin, 1)).xyz;
        wallRay.direction = (inverse(wallMatrices[i]) * vec4(ray.direction, 0)).xyz;

        vec3 point = aabbHitPoint(wallRay, canonical);
        if(point != wallRay.origin)
        {
            point = (wallMatrices[i] * vec4(point, 1)).xyz;
            float t = distance(point, ray.origin);

            if (t > ray.tmin && t < closestT)
            {
               closestT = t;
               closestI = i;

               mat4 normalMatrix = transpose(inverse(wallMatrices[i]));
               normal = normalize(normalMatrix * vec4(aabbHitNormal(wallRay, canonical), 0)).xyz;
            }
        }
   }


   if (closestI == 0)
        return boxHitShader(vec3(1, 0, 0), normal);
   if (closestI == 1)
        return boxHitShader(vec3(0, 0, 1), normal);
   if (closestI == 2 || closestI == 3)
        return boxHitShader(vec3(0, 1, 0), normal);
   if (closestI == 4)
        return boxHitShader(vec3(1, 1, 1), normal);

   return missShader(ray);
}

Ray rayGenerate(vec2 pixel) 
{
    Ray ray;
    vec3 w = normalize(eye-at);
    vec3 u = normalize(cross(up,w));
    vec3 v = cross(w,u);
    float height = 2.0*tan(fov/2.0);
    float width = height * resolution.x/ resolution.y;
    ray.origin = eye;
    ray.direction = normalize(-w 
    + ((1 - ((2.0 * pixel.y + 1) / resolution.y)) * (height / 2.0) * v)
    - ((1 - ((2.0 * pixel.x + 1) / resolution.x)) * (width / 2.0) * u)
    ); 
    ray.tmax = 1.0 / 0.0;
    ray.tmin = 0.0;
    return ray;
}

void main() {

    // Get thread coordinates
    vec2 pixel = gl_GlobalInvocationID.xy;

    // generate rays for pixel(x,y) 
    Ray ray = rayGenerate(pixel);
    vec4 color = rayColor(ray);

    // Write the calculated color to the output image
    imageStore(outputImage, ivec2(pixel.x, pixel.y), color);
}

